using MediaToolkit;
using MediaToolkit.Model;
using System;
using System.Diagnostics;
using System.IO;
using System.Text.Json;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace VideoThumbnailViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            // Initializes XAML-defined components (auto-generated by WPF)
            InitializeComponent();

            Loaded += (s, e) =>
            {
                UpdateLayout();
                SizeChanged += (sender, args) => UpdateLayout();
            };
        }

        static async Task DoTranslate(string text)
        {
            string result = await BaiduTranslator.TranslateEnglishToChinese(text);
            Debug.WriteLine($"Translation result: {result}");
        }

        private new void UpdateLayout()
        {
            if (VideoList == null) return;

            WrapPanel? wrapPanel = FindVisualChild<WrapPanel>(VideoList);
            if (wrapPanel != null)
            {
                wrapPanel.Width = VideoList.ActualWidth;
                wrapPanel.UpdateLayout();
            }
        }

        private async void ButtonTranslate_Click(object sender, RoutedEventArgs e)
        {
            await DoTranslate("The quick brown fox");
        }

        private void SelectFolderButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var dialog = new Microsoft.Win32.OpenFolderDialog
                {
                    Title = "Select Folder",
                    Multiselect = false
                };

                if (dialog.ShowDialog() == true && !string.IsNullOrEmpty(dialog.FolderName))
                {
                    Debug.WriteLine($"Folder selected: {dialog.FolderName}");
                    if (FolderPathTextBlock != null)
                    {
                        FolderPathTextBlock.Text = dialog.FolderName;
                    }
                    Dispatcher.Invoke(() => { }, DispatcherPriority.Render);
                    LoadVideos(dialog.FolderName).GetAwaiter().GetResult();
                    Debug.WriteLine($"Loaded {(VideoList?.Items.Count ?? 0)} videos");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"CRASH in SelectFolderButton_Click: {ex}");
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private T? FindVisualChild<T>(DependencyObject? parent) where T : DependencyObject
        {
            if (parent == null) return null;

            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(parent); i++)
            {
                DependencyObject child = VisualTreeHelper.GetChild(parent, i);
                if (child is T foundChild)
                {
                    return foundChild;
                }
                T? childOfChild = FindVisualChild<T>(child);
                if (childOfChild != null)
                {
                    return childOfChild;
                }
            }
            return null;
        }

        private async Task LoadVideos(string folderPath)
        {
            try
            {
                if (VideoList == null) return;

                VideoList.ItemsSource = null;
                GC.Collect();
                GC.WaitForPendingFinalizers();

                var videoExtensions = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { ".mp4", ".avi", ".mkv", ".mov", ".wmv" };
                var imageExtensions = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { ".jpg", ".jpeg", ".png" };

                string[] allFiles = Directory.GetFiles(folderPath);
                var videos = new List<VideoInfo>();
                var videoFiles = allFiles.Where(f => videoExtensions.Contains(Path.GetExtension(f)?.ToLower() ?? "")).ToList();

                var concurrentVideos = new System.Collections.Concurrent.ConcurrentBag<VideoInfo>();

                var options = new ParallelOptions
                {
                    MaxDegreeOfParallelism = 6
                };

                await Parallel.ForEachAsync(videoFiles, options, (file, cancellationToken) =>
                {
                    try
                    {
                        var videoName = Path.GetFileNameWithoutExtension(file);
                        if (string.IsNullOrEmpty(videoName))
                            return new ValueTask();
                        var thumbnail = allFiles.FirstOrDefault(f =>
                            imageExtensions.Contains(Path.GetExtension(f)?.ToLower() ?? "") &&
                            Path.GetFileNameWithoutExtension(f)?.Equals(videoName, StringComparison.OrdinalIgnoreCase) == true);

                        VideoInfo? videoInfo = CreateVideoInfo(file, thumbnail);
                        if (videoInfo != null)
                        {
                            concurrentVideos.Add(videoInfo);
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"Error processing {file}: {ex}");
                    }

                    return new ValueTask();
                });

                videos = concurrentVideos.ToList();

                await Dispatcher.InvokeAsync(() =>
                {
                    VideoList.ItemsSource = videos;
                    UpdateLayout();
                }, DispatcherPriority.Render);

                Debug.WriteLine($"Successfully processed {videos.Count} videos");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"LoadVideos error: {ex}");
                await Dispatcher.InvokeAsync(() =>
                {
                    MessageBox.Show($"Error loading videos: {ex.Message}", "Error",
                        MessageBoxButton.OK, MessageBoxImage.Error);
                });
            }
        }

        private VideoInfo? CreateVideoInfo(string videoPath, string? thumbnailPath)
        {
            try
            {
                string fileName = Path.GetFileName(videoPath) ?? throw new InvalidOperationException("Invalid video path");
                string englishTitle = Path.GetFileNameWithoutExtension(videoPath) ?? "";
                string chineseTitle = "";

                Debug.WriteLine($"Creating VideoInfo: {englishTitle} -> {chineseTitle}");

                var videoInfo = new VideoInfo
                {
                    FileName = fileName,
                    EnglishTitle = englishTitle,
                    ChineseTitle = chineseTitle,
                    FilePath = videoPath,
                    FileSize = FormatFileSize(new FileInfo(videoPath).Length),
                    ThumbnailPath = thumbnailPath ?? "pack://application:,,,/Resources/placeholder.png",
                    Resolution = "Unknown",
                    Duration = "Unknown",
                    FPS = "Unknown",
                    AudioSampleRate = "Unknown"
                };

                using (var engine = new Engine())
                {
                    var mediaFile = new MediaFile { Filename = videoPath };
                    engine.GetMetadata(mediaFile);

                    if (mediaFile.Metadata != null)
                    {
                        if (!string.IsNullOrEmpty(mediaFile.Metadata.VideoData?.FrameSize) &&
                            mediaFile.Metadata.VideoData.FrameSize.Contains("x"))
                        {
                            videoInfo.Resolution = mediaFile.Metadata.VideoData.FrameSize;
                        }

                        if (mediaFile.Metadata.Duration.TotalSeconds >= 1)
                        {
                            videoInfo.Duration = $"{mediaFile.Metadata.Duration.Hours:D2}:" +
                                              $"{mediaFile.Metadata.Duration.Minutes:D2}:" +
                                              $"{mediaFile.Metadata.Duration.Seconds:D2}";
                        }

                        if (mediaFile.Metadata.VideoData?.Fps > 0)
                        {
                            videoInfo.FPS = mediaFile.Metadata.VideoData.Fps.ToString("F2");
                        }

                        if (!string.IsNullOrEmpty(mediaFile.Metadata.AudioData?.SampleRate) &&
                            int.TryParse(mediaFile.Metadata.AudioData.SampleRate, out int sampleRate) &&
                            sampleRate > 0)
                        {
                            videoInfo.AudioSampleRate = $"{sampleRate} Hz";
                        }
                    }
                }

                return videoInfo;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error creating video info for {videoPath}: {ex}");
                return null;
            }
        }

        public class Translation
        {
            public required string English { get; set; }
            public required string Chinese { get; set; }

            public override string ToString() => $"English: '{English}', Chinese: '{Chinese}'";
        }

        private static string GetChineseTitle(string englishTitle)
        {
            try
            {
                string jsonPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "chinese-translations.json");
                if (!File.Exists(jsonPath))
                {
                    Debug.WriteLine($"Translation file not found: {jsonPath}");
                    return englishTitle;
                }

                string jsonContent = File.ReadAllText(jsonPath);
                List<Translation>? translations = JsonSerializer.Deserialize<List<Translation>>(jsonContent);
                if (translations == null)
                {
                    Debug.WriteLine("Failed to deserialize translations");
                    return englishTitle;
                }

                string cleanTitle = englishTitle.Replace(".jpg", "").Trim();
                Debug.WriteLine($"\nSearching for translation for: '{cleanTitle}'");
                Debug.WriteLine($"Total translations available: {translations.Count}");

                Translation? exactMatch = translations.FirstOrDefault(t =>
                    t.English.Equals(cleanTitle, StringComparison.OrdinalIgnoreCase));

                if (exactMatch != null)
                {
                    Debug.WriteLine($"Exact match found: {exactMatch}");
                    return exactMatch.Chinese;
                }

                Translation? containsMatch = translations.FirstOrDefault(t =>
                    cleanTitle.Contains(t.English, StringComparison.OrdinalIgnoreCase));

                if (containsMatch != null)
                {
                    Debug.WriteLine($"Partial match found: {containsMatch}");
                    return containsMatch.Chinese;
                }

                string baseTitle = cleanTitle.Split(new[] { "｜", "|" }, StringSplitOptions.RemoveEmptyEntries)[0].Trim();
                Translation? baseMatch = translations.FirstOrDefault(t =>
                    t.English.StartsWith(baseTitle, StringComparison.OrdinalIgnoreCase));

                if (baseMatch != null)
                {
                    Debug.WriteLine($"Base match found: {baseMatch}");
                    return baseMatch.Chinese;
                }

                Debug.WriteLine($"No translation found for: '{cleanTitle}'");
                return cleanTitle;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error in GetChineseTitle: {ex}");
                return englishTitle;
            }
        }

        private static string FindMatchingThumbnail(string videoFile, string[] imageExtensions, string folderPath)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(videoFile) || !File.Exists(videoFile))
                    return string.Empty;

                string? videoName = Path.GetFileNameWithoutExtension(videoFile);
                if (string.IsNullOrWhiteSpace(videoName))
                    return string.Empty;

                string[] files = Directory.EnumerateFiles(folderPath).ToArray();
                foreach (string file in files)
                {
                    try
                    {
                        string? ext = Path.GetExtension(file)?.ToLower();
                        string? fileNameWithoutExt = Path.GetFileNameWithoutExtension(file);
                        if (imageExtensions.Contains(ext ?? "") &&
                            fileNameWithoutExt?.Equals(videoName, StringComparison.OrdinalIgnoreCase) == true)
                        {
                            return file;
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"Error examining file {file}: {ex.Message}");
                        continue;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error finding thumbnail for {videoFile}: {ex.Message}");
            }

            return string.Empty;
        }

        private string FormatFileSize(long bytes)
        {
            string[] sizes = { "B", "KB", "MB", "GB" };
            double len = bytes;
            int order = 0;
            while (len >= 1024 && order < sizes.Length - 1)
            {
                order++;
                len /= 1024;
            }
            return $"{len:0.##} {sizes[order]}";
        }

        private string FormatDuration(TimeSpan duration)
        {
            return duration.TotalSeconds < 1 ? "Unknown" :
                $"{(int)duration.TotalHours:D2}:{duration.Minutes:D2}:{duration.Seconds:D2}";
        }

        private void Thumbnail_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2 && sender is System.Windows.Controls.Image image && image.DataContext is VideoInfo videoInfo)
            {
                try
                {
                    Process.Start(new ProcessStartInfo
                    {
                        FileName = videoInfo.FilePath,
                        UseShellExecute = true
                    });
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error playing video: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void BitmapImage_Changed(object sender, EventArgs e)
        {
        }
    }

    public class VideoInfo
    {
        public string FileName { get; set; } = string.Empty;
        public string EnglishTitle { get; set; } = string.Empty;
        public string ChineseTitle { get; set; } = string.Empty;
        public string FilePath { get; set; } = string.Empty;
        public string FileSize { get; set; } = string.Empty;
        public string ThumbnailPath { get; set; } = string.Empty;
        public string Resolution { get; set; } = string.Empty;
        public string Duration { get; set; } = string.Empty;
        public string FPS { get; set; } = string.Empty;
        public string AudioSampleRate { get; set; } = string.Empty;
    }
}
