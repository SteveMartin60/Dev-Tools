// ======================================================================
◇ Begin File: App.xaml
// -----------------------------------

   1 | <Application x:Class="PasswordGenerator.App"<Application x:Class="PasswordGenerator.App"
   2 |              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
   3 |              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
   4 |              xmlns:local="clr-namespace:PasswordGenerator"
   5 |              StartupUri="password-generator.xaml">
   6 |     <Application.Resources>
   7 |          
   8 |     </Application.Resources>
   9 | </Application>
  10 | 

// -----------------------------------
◇ End File: App.xaml
// ======================================================================

// ======================================================================
◈ Begin File: App.xaml.cs
// -----------------------------------

   1 | using System.Configuration;
   2 | using System.Data;
   3 | using System.Windows;
   4 | 
   5 | namespace PasswordGenerator
   6 | {
   7 |     /// <summary>
   8 |     /// Interaction logic for App.xaml
   9 |     /// </summary>
  10 |     public partial class App : Application
  11 |     {
  12 |     }
  13 | 
  14 | }
  15 | 

// -----------------------------------
◈ End File: App.xaml.cs
// ======================================================================

// ======================================================================
◈ Begin File: AssemblyInfo.cs
// -----------------------------------

   1 | using System.Windows;
   2 | 
   3 | [assembly: ThemeInfo(
   4 |     ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
   5 |                                                 //(used if a resource is not found in the page,
   6 |                                                 // or application resource dictionaries)
   7 |     ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
   8 |                                                 //(used if a resource is not found in the page,
   9 |                                                 // app, or any theme specific resource dictionaries)
  10 | )]
  11 | 

// -----------------------------------
◈ End File: AssemblyInfo.cs
// ======================================================================

// ======================================================================
⚙ Begin File: password-generator.csproj
// -----------------------------------

   1 | <Project Sdk="Microsoft.NET.Sdk">
   2 | 
   3 |   <PropertyGroup>
   4 |     <OutputType>WinExe</OutputType>
   5 |     <TargetFramework>net9.0-windows</TargetFramework>
   6 |     <RootNamespace>password_generator</RootNamespace>
   7 |     <Nullable>enable</Nullable>
   8 |     <ImplicitUsings>enable</ImplicitUsings>
   9 |     <UseWPF>true</UseWPF>
  10 |     <ApplicationIcon>icons\secure-documents-icon.ico</ApplicationIcon>
  11 |   </PropertyGroup>
  12 | 
  13 |   <ItemGroup>
  14 |     <Compile Remove="views\**" />
  15 |     <EmbeddedResource Remove="views\**" />
  16 |     <None Remove="views\**" />
  17 |     <Page Remove="views\**" />
  18 |   </ItemGroup>
  19 | 
  20 |   <ItemGroup>
  21 |     <Content Include="icons\secure-documents-icon.ico" />
  22 |   </ItemGroup>
  23 | 
  24 |   <ItemGroup>
  25 |     <PackageReference Include="MediaToolkit" Version="1.1.0.1" />
  26 |   </ItemGroup>
  27 | 
  28 | 	<ItemGroup>
  29 | 		<None Update="word-lists.txt">
  30 | 			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
  31 | 		</None>
  32 | 	</ItemGroup>
  33 | 
  34 | </Project>
  35 | 

// -----------------------------------
⚙ End File: password-generator.csproj
// ======================================================================

// ======================================================================
⚙ Begin File: password-generator.sln
// -----------------------------------

   1 | Microsoft Visual Studio Solution File, Format Version 12.00
   2 | # Visual Studio Version 17
   3 | VisualStudioVersion = 17.5.2.0
   4 | MinimumVisualStudioVersion = 10.0.40219.1
   5 | Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "password-generator", "password-generator.csproj", "{77A3DCC0-E0DD-35CC-E99B-D9BFE785FE03}"
   6 | EndProject
   7 | Global
   8 | GlobalSection	(SolutionConfigurationPlatforms) = preSolution
   9 | 		Debug|Any CPU = Debug|Any CPU
  10 | 		Release|Any CPU = Release|Any CPU
  11 | 	EndGlobalSection
  12 | GlobalSection	(ProjectConfigurationPlatforms) = postSolution
  13 | 		{77A3DCC0-E0DD-35CC-E99B-D9BFE785FE03}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
  14 | 		{77A3DCC0-E0DD-35CC-E99B-D9BFE785FE03}.Debug|Any CPU.Build.0 = Debug|Any CPU
  15 | 		{77A3DCC0-E0DD-35CC-E99B-D9BFE785FE03}.Release|Any CPU.ActiveCfg = Release|Any CPU
  16 | 		{77A3DCC0-E0DD-35CC-E99B-D9BFE785FE03}.Release|Any CPU.Build.0 = Release|Any CPU
  17 | 	EndGlobalSection
  18 | GlobalSection	(SolutionProperties) = preSolution
  19 | 		HideSolutionNode = FALSE
  20 | 	EndGlobalSection
  21 | GlobalSection	(ExtensibilityGlobals) = postSolution
  22 | 		SolutionGuid = {EB3C6339-21C8-4AA2-BFC0-F9D18EB59D9B}
  23 | 	EndGlobalSection
  24 | EndGlobal
  25 | 

// -----------------------------------
⚙ End File: password-generator.sln
// ======================================================================

// ======================================================================
◇ Begin File: password-generator.xaml
// -----------------------------------

   1 | <Window x:Class="PasswordGenerator.Views.MainWindow"<Window x:Class="PasswordGenerator.Views.MainWindow"
   2 |         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
   3 |         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
   4 |         xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
   5 |         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
   6 |         xmlns:local="clr-namespace:PasswordGenerator.ViewModels"
   7 |         mc:Ignorable="d"
   8 |         Title="Password Generator" Height="450" Width="800"
   9 |         WindowStartupLocation="CenterScreen"
  10 |         >
  11 |     <Grid Margin="20">
  12 |         <Grid.RowDefinitions>
  13 |             <RowDefinition Height="Auto"/>
  14 |             <RowDefinition Height="Auto"/>
  15 |             <RowDefinition Height="*"/>
  16 |         </Grid.RowDefinitions>
  17 | 
  18 |         <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,20">
  19 |             <TextBlock Text="Number of passphrases:" VerticalAlignment="Center" Margin="0,0,10,0"/>
  20 |             <TextBox Text="{Binding PassphraseCount, UpdateSourceTrigger=PropertyChanged}" <TextBox Text="{Binding PassphraseCount, UpdateSourceTrigger=PropertyChanged}" 
  21 |                      Width="50" VerticalAlignment="Center"/>
  22 |             <Button Content="Generate" Command="{Binding GenerateCommand}" <Button Content="Generate" Command="{Binding GenerateCommand}" 
  23 |                     Margin="10,0,0,0" Padding="10,5"/>
  24 |         </StackPanel>
  25 | 
  26 |         <ScrollViewer Grid.Row="2" VerticalScrollBarVisibility="Auto">
  27 |             <TextBox Text="{Binding Passphrase}" <TextBox Text="{Binding Passphrase}" 
  28 |                      TextWrapping="Wrap" 
  29 |                      AcceptsReturn="True" 
  30 |                      IsReadOnly="True" 
  31 |                      FontFamily="Consolas" 
  32 |                      VerticalScrollBarVisibility="Auto" 
  33 |                      HorizontalScrollBarVisibility="Disabled"
  34 |                      />
  35 |         </ScrollViewer>
  36 |     </Grid>
  37 | </Window>
  38 |     

// -----------------------------------
◇ End File: password-generator.xaml
// ======================================================================

// ======================================================================
◈ Begin File: password-generator.xaml.cs
// -----------------------------------

   1 | using System.Windows;
   2 | 
   3 | namespace PasswordGenerator.Views
   4 | {
   5 |     public partial class MainWindow : Window
   6 |     {
   7 |         public MainWindow()
   8 |         {
   9 |             InitializeComponent();
  10 |         }
  11 |     }
  12 | }
  13 | 

// -----------------------------------
◈ End File: password-generator.xaml.cs
// ======================================================================

// ======================================================================
◈ Begin File: models\passphrase-generator.cs
// -----------------------------------

   1 | using System;
   2 | using System.Collections.Generic;
   3 | using System.Diagnostics;
   4 | using System.Linq;
   5 | 
   6 | namespace PasswordGenerator.Models
   7 | {
   8 |     public class PassphraseGenerator
   9 |     {
  10 |         private readonly WordList _wordList;
  11 |         private readonly Random _random = new Random();
  12 | 
  13 |         public PassphraseGenerator(WordList wordList)
  14 |         {
  15 |             _wordList = wordList;
  16 |         }
  17 | 
  18 |         public string GeneratePassphrase()
  19 |         {
  20 |             // 1. Identify possible starting letters that exist in all required categories
  21 |             var possibleLetters = GetPossibleStartingLetters();
  22 | 
  23 |             if (possibleLetters.Count == 0)
  24 |             {
  25 |                 return "No valid starting letters found across all word lists";
  26 |             }
  27 | 
  28 |             // 2. Pick a random starting letter
  29 |             var selectedLetter = possibleLetters[_random.Next(possibleLetters.Count)];
  30 | 
  31 |             // 3. Select words for each category that start with the chosen letter
  32 |             var words = new List<string>
  33 |             {
  34 |                 GetRandomWordStartingWith(_wordList.LyVerbs,      selectedLetter),
  35 |                 GetRandomWordStartingWith(_wordList.Verbs,        selectedLetter),
  36 |                 GetRandomWordStartingWith(_wordList.Superlatives, selectedLetter),
  37 |                 GetRandomWordStartingWith(_wordList.Adjectives,   selectedLetter),
  38 |                 GetRandomWordStartingWith(_wordList.Nouns,        selectedLetter),
  39 |                 GetRandomWordStartingWith(_wordList.LyVerbs,      selectedLetter)
  40 |             };
  41 | 
  42 |             // Capitalize exactly two random words
  43 |             var indicesToCapitalize = GetRandomIndices(words.Count, 2);
  44 |             for (int i = 0; i < words.Count; i++)
  45 |             {
  46 |                 if (indicesToCapitalize.Contains(i))
  47 |                 {
  48 |                     words[i] = CapitalizeFirstLetter(words[i]);
  49 |                 }
  50 |             }
  51 | 
  52 |             return string.Join("-", words).Trim();
  53 |         }
  54 | 
  55 |         private List<char> GetPossibleStartingLetters()
  56 |         {
  57 |             // Get all letters that have at least one word in each required category
  58 |             var lettersWithLyVerbs      = GetStartingLetters(_wordList.LyVerbs     );
  59 |             var lettersWithVerbs        = GetStartingLetters(_wordList.Verbs       );
  60 |             var lettersWithSuperlatives = GetStartingLetters(_wordList.Superlatives);
  61 |             var lettersWithAdjectives   = GetStartingLetters(_wordList.Adjectives  );
  62 |             var lettersWithNouns        = GetStartingLetters(_wordList.Nouns       );
  63 | 
  64 |             // Find intersection of all letter sets
  65 |             return lettersWithLyVerbs
  66 |                 .Intersect(lettersWithVerbs)
  67 |                 .Intersect(lettersWithSuperlatives)
  68 |                 .Intersect(lettersWithAdjectives)
  69 |                 .Intersect(lettersWithNouns)
  70 |                 .ToList();
  71 |         }
  72 | 
  73 |         private HashSet<char> GetStartingLetters(List<string> words)
  74 |         {
  75 |             var Result= new HashSet<char>(words
  76 |                 .Where(w => !string.IsNullOrEmpty(w))
  77 |                 .Select(w => char.ToUpper(w[0])));
  78 | 
  79 |             Debug.WriteLine("Got starting letters");
  80 | 
  81 |             return Result;
  82 |         }
  83 | 
  84 |         private string GetRandomWordStartingWith(List<string> words, char letter)
  85 |         {
  86 |             var matchingWords = words
  87 |                 .Where(w => w.Length > 0 && char.ToUpper(w[0]) == char.ToUpper(letter))
  88 |                 .ToList();
  89 | 
  90 |             return matchingWords.Count > 0
  91 |                 ? matchingWords[_random.Next(matchingWords.Count)]
  92 |                 : $"no_{letter}_match";
  93 |         }
  94 | 
  95 |         private List<int> GetRandomIndices(int totalCount, int countToSelect)
  96 |         {
  97 |             var indices = Enumerable.Range(0, totalCount).ToList();
  98 |             var selected = new List<int>();
  99 | 
 100 |             for (int i = 0; i < countToSelect; i++)
 101 |             {
 102 |                 var randomIndex = _random.Next(indices.Count);
 103 |                 selected.Add(indices[randomIndex]);
 104 |                 indices.RemoveAt(randomIndex);
 105 |             }
 106 | 
 107 |             return selected;
 108 |         }
 109 | 
 110 |         private string CapitalizeFirstLetter(string word)
 111 |         {
 112 |             if (string.IsNullOrEmpty(word))
 113 |                 return word;
 114 | 
 115 |             return char.ToUpper(word[0]) + word.Substring(1).ToLower();
 116 |         }
 117 |     }
 118 | }
 119 | 

// -----------------------------------
◈ End File: models\passphrase-generator.cs
// ======================================================================

// ======================================================================
◈ Begin File: models\word-list.cs
// -----------------------------------

   1 | namespace PasswordGenerator.Models
   2 | {
   3 |     public class WordList
   4 |     {
   5 |         public List<string> LyVerbs      { get; set; } = new List<string>();
   6 |         public List<string> Verbs        { get; set; } = new List<string>();
   7 |         public List<string> Superlatives { get; set; } = new List<string>();
   8 |         public List<string> Adjectives   { get; set; } = new List<string>();
   9 |         public List<string> Nouns        { get; set; } = new List<string>();
  10 |     }
  11 | }
  12 | 

// -----------------------------------
◈ End File: models\word-list.cs
// ======================================================================

// ======================================================================
◈ Begin File: services\word-list-service.cs
// -----------------------------------

   1 | using PasswordGenerator.Models;
   2 | using System;
   3 | using System.Collections.Generic;
   4 | using System.Diagnostics;
   5 | using System.Globalization;
   6 | using System.IO;
   7 | using System.Linq;
   8 | using System.Text.RegularExpressions;
   9 | 
  10 | namespace PasswordGenerator.Services
  11 | {
  12 |     public class WordListService
  13 |     {
  14 |         int Index = 0;
  15 |         
  16 |         List<string>? Adjectives     {get; set;}
  17 |         List<string>? LyAdjectives   {get; set;}
  18 |         List<string>? AdVerbs        {get; set;}
  19 |         List<string>? Nouns          {get; set;}
  20 |         List<string>? Verbs          {get; set;}
  21 |         List<string>? LyVerbs        {get; set;}
  22 | 
  23 |         List<string> superlatives = new List<string>();
  24 | 
  25 |         string AdjectiveList { get; set; } = @"D:\Dev-Tools\password-generator\word-lists\data.adj";
  26 |         string AdVerbList    { get; set; } = @"D:\Dev-Tools\password-generator\word-lists\data.adv";
  27 |         string NounList      { get; set; } = @"D:\Dev-Tools\password-generator\word-lists\data.noun";
  28 |         string VerbList      { get; set; } = @"D:\Dev-Tools\password-generator\word-lists\data.verb";
  29 | 
  30 |         int ColumnIndex = 0;
  31 |         public WordList GetDefaultWordLists(bool generateSuperlatives = false)
  32 |         {
  33 |             var wordList = new WordList();
  34 |             var filePath = "word-lists.txt";
  35 | 
  36 |             if (generateSuperlatives)
  37 |             {
  38 |                 GenerateSuperlatives(AdjectiveList, @"D:\Dev-Tools\password-generator\word-lists\dict\data.super.txt");
  39 |             }
  40 | 
  41 |             LoadAdjectives();
  42 |             LoadLyAdjectives();
  43 |             LoadVerbs     ();
  44 |             LoadLyVerbs     ();
  45 |             LoadAdVerbs   ();
  46 |             LoadNouns     ();
  47 | 
  48 |             IEnumerable<string> lines = File.ReadAllLines(filePath).Skip(2);
  49 | 
  50 |             foreach (var line in lines.Skip(2))
  51 |             {
  52 |                 ColumnIndex = 0;
  53 | 
  54 |                 Index++;
  55 | 
  56 |                 var columns = line.Split('|');
  57 | 
  58 |                 int ColumnCount = columns.Count();
  59 | 
  60 |                 if (columns.Count() > ColumnIndex)
  61 |                 {
  62 |                     string ColumnString = columns[ColumnIndex];
  63 | 
  64 |                     AddWordFromColumn(wordList.LyVerbs, ColumnString);
  65 |                 }
  66 |             }
  67 | 
  68 |             foreach (var line in lines.Skip(2))
  69 |             {
  70 |                 ColumnIndex = 1;
  71 | 
  72 |                 Index++;
  73 | 
  74 |                 var columns = line.Split('|');
  75 | 
  76 |                 int ColumnCount = columns.Count();
  77 | 
  78 |                 if (columns.Count() > ColumnIndex)
  79 |                 {
  80 |                     string ColumnString = columns[ColumnIndex];
  81 | 
  82 |                     AddWordFromColumn(wordList.Verbs, ColumnString);
  83 |                 }
  84 |             }
  85 | 
  86 |             foreach (var line in lines.Skip(2))
  87 |             {
  88 |                 ColumnIndex = 2;
  89 | 
  90 |                 Index++;
  91 | 
  92 |                 var columns = line.Split('|');
  93 | 
  94 |                 int ColumnCount = columns.Count();
  95 | 
  96 |                 if (columns.Count() > ColumnIndex)
  97 |                 {
  98 |                     string ColumnString = columns[ColumnIndex];
  99 | 
 100 |                     AddWordFromColumn(wordList.Adjectives, ColumnString);
 101 |                 }
 102 |             }
 103 | 
 104 |             foreach (var line in lines.Skip(2))
 105 |             {
 106 |                 ColumnIndex = 3;
 107 | 
 108 |                 Index++;
 109 | 
 110 |                 var columns = line.Split('|');
 111 | 
 112 |                 int ColumnCount = columns.Count();
 113 | 
 114 |                 if (columns.Count() > ColumnIndex)
 115 |                 {
 116 |                     string ColumnString = columns[ColumnIndex];
 117 | 
 118 |                     AddWordFromColumn(wordList.Nouns, ColumnString);
 119 |                 }
 120 |             }
 121 | 
 122 |             foreach (var line in lines.Skip(2))
 123 |             {
 124 |                 ColumnIndex = 4;
 125 | 
 126 |                 Index++;
 127 | 
 128 |                 var columns = line.Split('|');
 129 | 
 130 |                 int ColumnCount = columns.Count();
 131 | 
 132 |                 if (columns.Count() > ColumnIndex)
 133 |                 {
 134 |                     string ColumnString = columns[ColumnIndex];
 135 | 
 136 |                     AddWordFromColumn(wordList.Superlatives, ColumnString);
 137 |                 }
 138 |             }
 139 | 
 140 |             return wordList;
 141 |         }
 142 |         //.....................................................................
 143 | 
 144 |         //.....................................................................
 145 |         private void AddWordFromColumn(List<string> wordList, string column)
 146 |         {
 147 |             try
 148 |             {
 149 |                 Debug.WriteLine("Check here");
 150 | 
 151 |                 var P = column.Trim().Split([' ', '\t']);
 152 | 
 153 |                 var parts = column.Trim().Split([' ', '\t'], StringSplitOptions.RemoveEmptyEntries);
 154 | 
 155 |                 if (parts.Length > 0 && !string.IsNullOrWhiteSpace(parts[0]))
 156 |                 {
 157 |                     wordList.Add(parts[0]);
 158 |                 }
 159 |             }
 160 |             catch (Exception)
 161 |             {
 162 |                 throw;
 163 |             }
 164 | 
 165 |         }
 166 |         //.....................................................................
 167 | 
 168 |         //.....................................................................
 169 |         private void LoadAdjectives()
 170 |         {
 171 |             List<string> AdjectivesLines = File.ReadAllLines(AdjectiveList).Skip(29).ToList();
 172 |             
 173 |             Adjectives = new List<string>();
 174 | 
 175 |             for (int i = 0; i < AdjectivesLines.Count; i++)
 176 |             {
 177 |                 var Parts = AdjectivesLines[i].Split(' ');
 178 | 
 179 |                 var word = Parts[4].Trim();
 180 | 
 181 |                 if (FilterWordString(word, false, 4, 6) && !Adjectives.Contains(word))
 182 |                 {
 183 |                     Adjectives.Add(word);
 184 |                 }
 185 |             }
 186 | 
 187 |             Debug.WriteLine("Loaded Adjectives");
 188 |         }
 189 |         //.....................................................................
 190 | 
 191 |         //.....................................................................
 192 |         private void LoadLyAdjectives()
 193 |         {
 194 |             LyAdjectives = new List<string>();
 195 | 
 196 |             List<string> AdjectivesLines = File.ReadAllLines(AdjectiveList).Skip(29).ToList();
 197 |             
 198 |             Adjectives = new List<string>();
 199 | 
 200 |             for (int i = 0; i < AdjectivesLines.Count; i++)
 201 |             {
 202 |                 var Parts = AdjectivesLines[i].Split(' ');
 203 | 
 204 |                 var word = Parts[4].Trim();
 205 | 
 206 |                 if (FilterWordString(word, true, 4, 6) && !LyAdjectives.Contains(word))
 207 |                 {
 208 |                     LyAdjectives.Add(word);
 209 |                 }
 210 |             }
 211 | 
 212 |             Debug.WriteLine("Loaded Adjectives");
 213 |         }
 214 |         //.....................................................................
 215 | 
 216 |         //.....................................................................
 217 |         private void LoadAdVerbs()
 218 |         {
 219 |             List<string> AdVerbLines = File.ReadAllLines(AdVerbList).Skip(29).ToList();
 220 |             
 221 |             AdVerbs = new List<string>();
 222 | 
 223 |             for (int i = 0; i < AdVerbLines.Count; i++)
 224 |             {
 225 |                 var Parts = AdVerbLines[i].Split(' ');
 226 | 
 227 |                 var word = Parts[4].Trim();
 228 | 
 229 |                 if (FilterWordString(word, false, 4, 6) && !AdVerbs.Contains(word))
 230 |                 { 
 231 |                     AdVerbs.Add(word);
 232 |                 }
 233 |             }
 234 | 
 235 |             Debug.WriteLine("Loaded AdVerbs");
 236 |         }
 237 |         //.....................................................................
 238 | 
 239 |         //.....................................................................
 240 |         private void LoadNouns()
 241 |         {
 242 |             List<string> NounLines = File.ReadAllLines(NounList).Skip(29).ToList();
 243 |             
 244 |             Nouns = new List<string>();
 245 | 
 246 |             for (int i = 0; i < NounLines.Count; i++)
 247 |             {
 248 |                 var Parts = NounLines[i].Split(' ');
 249 | 
 250 |                 var word = Parts[4].Trim();
 251 | 
 252 |                 if (FilterWordString(word, false, 4, 6) && !Nouns.Contains(word))
 253 |                 { 
 254 |                     Nouns.Add(word);
 255 |                 }
 256 |             }
 257 | 
 258 |             Debug.WriteLine("Loaded Nouns");
 259 |         }
 260 |         //.....................................................................
 261 | 
 262 |         //.....................................................................
 263 |         private void LoadVerbs()
 264 |         {
 265 |             List<string> VerbLines = File.ReadAllLines(VerbList).Skip(29).ToList();
 266 |             
 267 |             Verbs = new List<string>();
 268 | 
 269 |             for (int i = 0; i < VerbLines.Count; i++)
 270 |             {
 271 |                 var Parts = VerbLines[i].Split(' ');
 272 | 
 273 |                 var word = Parts[4].Trim();
 274 | 
 275 |                 if (FilterWordString(word, false, 4, 6) && !Verbs.Contains(word))
 276 |                 { 
 277 |                     Verbs.Add(word);
 278 |                 }
 279 |             }
 280 | 
 281 |             Debug.WriteLine("Loaded Verbs");
 282 |         }
 283 |         //.....................................................................
 284 | 
 285 |         //.....................................................................
 286 |         private void LoadLyVerbs()
 287 |         {
 288 |             List<string> VerbLines = File.ReadAllLines(VerbList).Skip(29).ToList();
 289 | 
 290 |             LyVerbs = new List<string>();
 291 | 
 292 |             for (int i = 0; i < VerbLines.Count; i++)
 293 |             {
 294 |                 var Parts = VerbLines[i].Split(' ');
 295 | 
 296 |                 var word = Parts[4].Trim();
 297 | 
 298 |                 if (FilterWordString(word, true, 4, 6) && !LyVerbs.Contains(word))
 299 |                 { 
 300 |                     LyVerbs.Add(word);
 301 |                 }
 302 |             }
 303 | 
 304 |             Debug.WriteLine("Loaded Verbs");
 305 |         }
 306 |         //.....................................................................
 307 | 
 308 |         //.....................................................................
 309 |         private bool FilterWordString(string Word, bool LyOnly, int MinLength, int MaxLength)
 310 |         {
 311 |             bool Short = Word.Length < MinLength;
 312 |             bool Long  = Word.Length > MaxLength;
 313 |             bool Pass  = Word.Contains("_") || Word.Contains(".") || Word.Contains("-") ||  Word.Contains("'") ||  Word.Contains("-");
 314 | 
 315 |             bool IsLy = Word.EndsWith("ly");
 316 | 
 317 |             bool Result = !Short && !Long && !Pass;
 318 | 
 319 |             if (LyOnly)
 320 |             {
 321 |                 Result = Result && IsLy;
 322 |             }
 323 | 
 324 |             return Result;
 325 |         }
 326 |         //.....................................................................
 327 |         #region Begin Region Superlatives
 328 |         //.....................................................................
 329 |         public void GenerateSuperlatives(string inputFilePath, string outputFilePath)
 330 |         {
 331 |             var consecutiveConsonantsPattern = new Regex(@"^([bcdfghjkilmnpqrstvwxyz])\1", RegexOptions.IgnoreCase);
 332 |             
 333 |             var irregulars = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
 334 |         {
 335 |             { "good", "best" },
 336 |             { "bad", "worst" },
 337 |             { "far", "farthest" },
 338 |             { "little", "least" }
 339 |         };
 340 | 
 341 |             // List to store superlative forms
 342 |             var superlatives = new List<string>();
 343 | 
 344 |             // Regex for consonant-vowel-consonant (CVC) pattern
 345 |             var cvcPattern = new Regex(@"[bcdfghjklmnpqrstvz][aeiou][bcdfghjklmnpqrstvz]$", RegexOptions.IgnoreCase);
 346 | 
 347 |             try
 348 |             {
 349 |                 // Read data.adj file
 350 |                 string[] lines = File.ReadAllLines(inputFilePath);
 351 | 
 352 |                 foreach (string line in lines)
 353 |                 {
 354 |                     // Skip comment lines starting with spaces
 355 |                     if (line.StartsWith("  "))
 356 |                         continue;
 357 | 
 358 |                     if (line.StartsWith("x"))
 359 |                         continue;
 360 | 
 361 |                     if (line.Contains("."))
 362 |                         continue;
 363 | 
 364 |                     if (line.Contains("'"))
 365 |                         continue;
 366 | 
 367 |                     if (line.Contains("-"))
 368 |                         continue;
 369 | 
 370 |                     if (line.Contains("cx"))
 371 |                         continue;
 372 | 
 373 |                     if (line.Contains("lx"))
 374 |                         continue;
 375 | 
 376 |                     if (line.Contains("ii"))
 377 |                         continue;
 378 | 
 379 |                     // Split line into parts
 380 |                     string[] parts = line.Split(' ', StringSplitOptions.RemoveEmptyEntries);
 381 |                     if (parts.Length < 4)
 382 |                         continue;
 383 | 
 384 |                     // Check POS (a = adjective, s = adjective satellite)
 385 |                     string pos = parts[2];
 386 |                     if (pos != "a" && pos != "s")
 387 |                         continue;
 388 | 
 389 |                     // Get word count (hexadecimal)
 390 |                     if (!int.TryParse(parts[3], NumberStyles.HexNumber, null, out int wordCount))
 391 |                         continue;
 392 | 
 393 |                     // Extract each word in the synset
 394 |                     for (int i = 0; i < wordCount; i++)
 395 |                     {
 396 |                         int wordIndex = 4 + i * 2; // Words are at positions 4, 6, 8, ...
 397 |                         if (wordIndex >= parts.Length)
 398 |                             break;
 399 | 
 400 |                         string word = parts[wordIndex].ToLower();
 401 | 
 402 |                         // Skip words with underscores, starting with a digit, or starting with consecutive identical consonants
 403 |                         if (word.Contains("_") || char.IsDigit(word[0]) || consecutiveConsonantsPattern.IsMatch(word))
 404 |                             continue;
 405 |                         
 406 |                         // Skip words with underscores (multi-word phrases) or starting with a digit
 407 |                         if (word.Contains("_") || char.IsDigit(word[0]))
 408 |                             continue;
 409 | 
 410 |                         // Generate superlative
 411 |                         string superlative;
 412 |                         if (irregulars.ContainsKey(word))
 413 |                         {
 414 |                             superlative = irregulars[word];
 415 |                         }
 416 |                         else if (Regex.IsMatch(word, @"[aeiou]?y$") && !Regex.IsMatch(word, @"[aeiou]y$"))
 417 |                         {
 418 |                             // Two-syllable adjectives ending in -y (e.g., happy → happiest)
 419 |                             superlative = word.Substring(0, word.Length - 1) + "iest";
 420 |                         }
 421 |                         else if (word.Length <= 5 && cvcPattern.IsMatch(word) && !word.EndsWith("w") && !word.EndsWith("x") && !word.EndsWith("y"))
 422 |                         {
 423 |                             // One-syllable CVC adjectives (e.g., fat → fattest, mad → maddest)
 424 |                             superlative = word + word[^1] + "est"; // Double last consonant
 425 |                         }
 426 |                         else if (word.Length <= 5)
 427 |                         {
 428 |                             // Other one-syllable adjectives (e.g., wet → wettest)
 429 |                             superlative = word + "est";
 430 |                         }
 431 |                         else
 432 |                         {
 433 |                             // Multi-syllable adjectives (e.g., beautiful → most beautiful)
 434 |                             superlative = "most " + word;
 435 |                         }
 436 | 
 437 |                         if (FilterWordString(superlative, false, 4, 7) && !superlatives.Contains(superlative))
 438 |                         {
 439 |                             superlatives.Add(superlative);
 440 |                         }
 441 |                     }
 442 |                 }
 443 | 
 444 |                 // Write to output file (superlative only)
 445 |                 using (StreamWriter writer = new StreamWriter(outputFilePath, false))
 446 |                 {
 447 |                     foreach (string sup in superlatives.OrderBy(s => s))
 448 |                     {
 449 |                         writer.WriteLine(sup);
 450 |                     }
 451 |                 }
 452 | 
 453 |                 Debug.WriteLine($"Superlatives written to {outputFilePath}. Total entries: {superlatives.Count}");
 454 |             }
 455 |             catch (Exception ex)
 456 |             {
 457 |                 Console.WriteLine($"Error processing file: {ex.Message}");
 458 |             }
 459 |         }
 460 |         //.....................................................................
 461 |         #endregion End Region Superlatives
 462 |         //.....................................................................
 463 |     }
 464 | }
 465 | 

// -----------------------------------
◈ End File: services\word-list-service.cs
// ======================================================================

// ======================================================================
◈ Begin File: view-models\main-view-vodel.cs
// -----------------------------------

   1 | using PasswordGenerator.Models;
   2 | using PasswordGenerator.Services;
   3 | using System.ComponentModel;
   4 | using System.IO;
   5 | using System.Runtime.CompilerServices;
   6 | using System.Windows.Input;
   7 | 
   8 | namespace PasswordGenerator.ViewModels
   9 | {
  10 |     public class MainViewModel : INotifyPropertyChanged
  11 |     {
  12 |         private readonly PassphraseGenerator _generator;
  13 |         private string _passphrase;
  14 |         private int _passphraseCount = 5;
  15 | 
  16 |         public event PropertyChangedEventHandler PropertyChanged;
  17 | 
  18 |         public string Passphrase
  19 |         {
  20 |             get => _passphrase;
  21 |             set
  22 |             {
  23 |                 _passphrase = value;
  24 |                 OnPropertyChanged();
  25 |             }
  26 |         }
  27 | 
  28 |         public int PassphraseCount
  29 |         {
  30 |             get => _passphraseCount;
  31 |             set
  32 |             {
  33 |                 _passphraseCount = value;
  34 |                 OnPropertyChanged();
  35 |             }
  36 |         }
  37 | 
  38 |         public ICommand GenerateCommand { get; }
  39 | 
  40 |         public MainViewModel()
  41 |         {
  42 |             var wordListService = new WordListService();
  43 |             var wordList = wordListService.GetDefaultWordLists();
  44 |             _generator = new PassphraseGenerator(wordList);
  45 | 
  46 |             GenerateCommand = new RelayCommand(GeneratePassphrases);
  47 |         }
  48 | 
  49 |         private void GeneratePassphrases()
  50 |         {
  51 |             string PassPhraseFile = @"D:\Dev-Tools\password-generator\passphrases.txt";
  52 | 
  53 |             var passphrases = new List<string>();
  54 | 
  55 |             for (int i = 0; i < PassphraseCount; i++)
  56 |             {
  57 |                 passphrases.Add(_generator.GeneratePassphrase());
  58 |             }
  59 | 
  60 |             Passphrase = string.Join("\n", passphrases);
  61 | 
  62 |             if (File.Exists(PassPhraseFile))
  63 |             {
  64 |                 File.AppendAllLines(PassPhraseFile, passphrases);
  65 |             }
  66 |             else
  67 |             {
  68 |                 File.WriteAllLines(PassPhraseFile, passphrases);
  69 |             }
  70 |         }
  71 | 
  72 |         protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
  73 |         {
  74 |             PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
  75 |         }
  76 |     }
  77 | 
  78 |     public class RelayCommand : ICommand
  79 |     {
  80 |         private readonly Action _execute;
  81 |         private readonly Func<bool> _canExecute;
  82 | 
  83 |         public event EventHandler CanExecuteChanged;
  84 | 
  85 |         public RelayCommand(Action execute, Func<bool> canExecute = null)
  86 |         {
  87 |             _execute = execute ?? throw new ArgumentNullException(nameof(execute));
  88 |             _canExecute = canExecute;
  89 |         }
  90 | 
  91 |         public bool CanExecute(object parameter) => _canExecute?.Invoke() ?? true;
  92 | 
  93 |         public void Execute(object parameter) => _execute();
  94 | 
  95 |         public void RaiseCanExecuteChanged() => CanExecuteChanged?.Invoke(this, EventArgs.Empty);
  96 |     }
  97 | }
  98 | 

// -----------------------------------
◈ End File: view-models\main-view-vodel.cs
// ======================================================================

